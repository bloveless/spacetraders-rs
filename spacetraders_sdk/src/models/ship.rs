/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

/// Ship : A ship



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Ship {
    /// The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]`
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "registration")]
    pub registration: Box<crate::models::ShipRegistration>,
    #[serde(rename = "nav")]
    pub nav: Box<crate::models::ShipNav>,
    #[serde(rename = "crew")]
    pub crew: Box<crate::models::ShipCrew>,
    #[serde(rename = "frame")]
    pub frame: Box<crate::models::ShipFrame>,
    #[serde(rename = "reactor")]
    pub reactor: Box<crate::models::ShipReactor>,
    #[serde(rename = "engine")]
    pub engine: Box<crate::models::ShipEngine>,
    #[serde(rename = "modules")]
    pub modules: Vec<crate::models::ShipModule>,
    #[serde(rename = "mounts")]
    pub mounts: Vec<crate::models::ShipMount>,
    #[serde(rename = "cargo")]
    pub cargo: Box<crate::models::ShipCargo>,
    #[serde(rename = "fuel")]
    pub fuel: Box<crate::models::ShipFuel>,
}

impl Ship {
    /// A ship
    pub fn new(symbol: String, registration: crate::models::ShipRegistration, nav: crate::models::ShipNav, crew: crate::models::ShipCrew, frame: crate::models::ShipFrame, reactor: crate::models::ShipReactor, engine: crate::models::ShipEngine, modules: Vec<crate::models::ShipModule>, mounts: Vec<crate::models::ShipMount>, cargo: crate::models::ShipCargo, fuel: crate::models::ShipFuel) -> Ship {
        Ship {
            symbol,
            registration: Box::new(registration),
            nav: Box::new(nav),
            crew: Box::new(crew),
            frame: Box::new(frame),
            reactor: Box::new(reactor),
            engine: Box::new(engine),
            modules,
            mounts,
            cargo: Box::new(cargo),
            fuel: Box::new(fuel),
        }
    }
}


