basePath: /v2
definitions: {}
host: api.spacetraders.io
info:
  contact:
    email: joel@spacetraders.io
    name: Joel Brubaker
  description: >+
    SpaceTraders is an open-universe game and learning platform that offers a
    set of HTTP endpoints to control a fleet of ships and explore a multiplayer
    universe.


    The API is documented using
    [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your
    first request right here in your browser to check the status of the game
    server.


    ```json http

    {
      "method": "GET",
      "url": "https://api.spacetraders.io/v2",
    }

    ```


    Unlike a traditional game, SpaceTraders does not have a first-party client
    or app to play the game. Instead, you can use the API to build your own
    client, write a script to automate your ships, or try an app built by the
    community.


    We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you
    can share your projects, ask questions, and get help from other players.


  license:
    name: No Permission
    url: 'https://choosealicense.com/no-permission/'
  title: SpaceTraders API
  version: 2.0.0
paths:
  /factions:
    get:
      description: List all discovered factions in the game.
      operationId: get-factions
      parameters:
        - description: What entry offset to request
          in: query
          minimum: 1
          name: page
          type: integer
        - description: How many entries to return per page
          in: query
          maximum: 20
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: ''
          schema:
            properties:
              data:
                items:
                  $ref: ../models/Faction.json
                type: array
              meta:
                $ref: ../models/Meta.json
            required:
              - data
              - meta
            type: object
      summary: List Factions
      tags:
        - factions
  '/factions/{factionSymbol}':
    get:
      description: View the details of a faction.
      operationId: get-faction
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              data:
                $ref: ../models/Faction.json
            required:
              - data
            type: object
      summary: Get Faction
      tags:
        - factions
    parameters:
      - default: CGR
        description: The faction symbol
        in: path
        name: factionSymbol
        required: true
        type: string
  /my/agent:
    get:
      description: Fetch your agent's details.
      operationId: get-my-agent
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              data:
                $ref: ../models/Agent.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: My Agent Details
      tags:
        - agents
  /my/contracts:
    get:
      description: List all of your contracts.
      operationId: get-contracts
      parameters:
        - description: What entry offset to request
          in: query
          minimum: 1
          name: page
          type: integer
        - description: How many entries to return per page
          in: query
          maximum: 20
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                items:
                  $ref: ../models/Contract.json
                type: array
              meta:
                $ref: ../models/Meta.json
            required:
              - data
              - meta
            type: object
      security:
        - AgentToken: []
      summary: List Contracts
      tags:
        - contracts
  '/my/contracts/{contractId}':
    get:
      description: Get the details of a contract by ID.
      operationId: get-contract
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              data:
                $ref: ../models/Contract.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Contract
      tags:
        - contracts
    parameters:
      - description: The contract ID
        in: path
        name: contractId
        required: true
        type: string
  '/my/contracts/{contractId}/accept':
    parameters:
      - in: path
        name: contractId
        required: true
        type: string
    post:
      description: Accept a contract.
      operationId: accept-contract
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  contract:
                    $ref: ../models/Contract.json
                required:
                  - contract
                  - agent
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Accept Contract
      tags:
        - contracts
  '/my/contracts/{contractId}/deliver':
    parameters:
      - description: The ID of the contract
        in: path
        name: contractId
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: Deliver cargo on a given contract.
      operationId: deliver-contract
      parameters:
        - in: body
          name: body
          schema:
            properties:
              shipSymbol:
                type: string
              tradeSymbol:
                type: string
              units:
                type: integer
            required:
              - shipSymbol
              - tradeSymbol
              - units
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                properties:
                  cargo:
                    $ref: ../models/ShipCargo.json
                  contract:
                    $ref: ../models/Contract.json
                required:
                  - contract
                  - cargo
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Deliver Contract
      tags:
        - contracts
  '/my/contracts/{contractId}/fulfill':
    parameters:
      - description: The ID of the contract
        in: path
        name: contractId
        required: true
        type: string
    post:
      description: Fulfill a contract
      operationId: fulfill-contract
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  contract:
                    $ref: ../models/Contract.json
                required:
                  - contract
                  - agent
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Fulfill Contract
      tags:
        - contracts
  /my/ships:
    get:
      description: Retrieve all of your ships.
      operationId: get-my-ships
      parameters:
        - description: What entry offset to request
          in: query
          minimum: 1
          name: page
          type: integer
        - description: How many entries to return per page
          in: query
          maximum: 20
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                items:
                  $ref: ../models/Ship.json
                type: array
              meta:
                $ref: ../models/Meta.json
            required:
              - data
              - meta
            type: object
      security:
        - AgentToken: []
      summary: List Ships
      tags:
        - fleet
    post:
      consumes:
        - application/json
      description: Purchase a ship
      operationId: purchase-ship
      parameters:
        - in: body
          name: body
          schema:
            properties:
              shipType:
                $ref: ../models/ShipType.json
              waypointSymbol:
                description: The symbol of the waypoint you want to purchase the ship at.
                type: string
            required:
              - shipType
              - waypointSymbol
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  ship:
                    $ref: ../models/Ship.json
                  transaction:
                    $ref: ../models/ShipyardTransaction.json
                required:
                  - ship
                  - agent
                  - transaction
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Purchase Ship
      tags:
        - fleet
  '/my/ships/{shipSymbol}':
    get:
      description: Retrieve the details of your ship.
      operationId: get-my-ship
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/Ship.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Ship
      tags:
        - fleet
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
  '/my/ships/{shipSymbol}/cargo':
    get:
      description: Retrieve the cargo of your ship.
      operationId: get-my-ship-cargo
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/ShipCargo.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Ship Cargo
      tags:
        - fleet
    parameters:
      - description: The symbol of the ship
        in: path
        name: shipSymbol
        required: true
        type: string
  '/my/ships/{shipSymbol}/chart':
    parameters:
      - description: The symbol of the ship
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: >-
        Command a ship to chart the current waypoint.


        Waypoints in the universe are uncharted by default. These locations will
        not show up in the API until they have been charted by a ship.


        Charting a location will record your agent as the one who created the
        chart.
      operationId: create-chart
      parameters: []
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            properties:
              data:
                properties:
                  chart:
                    $ref: ../models/Chart.json
                  waypoint:
                    $ref: ../models/Waypoint.json
                required:
                  - chart
                  - waypoint
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Create Chart
      tags:
        - fleet
  '/my/ships/{shipSymbol}/cooldown':
    get:
      description: >-
        Retrieve the details of your ship's reactor cooldown. Some actions such
        as activating your jump drive, scanning, or extracting resources taxes
        your reactor and results in a cooldown.


        Your ship cannot perform additional actions until your cooldown has
        expired. The duration of your cooldown is relative to the power
        consumption of the related modules or mounts for the action taken.


        Response returns a 204 status code (no-content) when the ship has no
        cooldown.
      operationId: get-ship-cooldown
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/Cooldown.json
            required:
              - data
            type: object
        '204':
          description: No cooldown
      security:
        - AgentToken: []
      summary: Get Ship Cooldown
      tags:
        - fleet
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
  '/my/ships/{shipSymbol}/dock':
    parameters:
      - description: The symbol of the ship
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: >-
        Attempt to dock your ship at it's current location. Docking will only
        succeed if the waypoint is a dockable location, and your ship is capable
        of docking at the time of the request.


        The endpoint is idempotent - successive calls will succeed even if the
        ship is already docked.
      operationId: dock-ship
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: The ship has successfully docked at it's current location.
          schema:
            description: ''
            properties:
              data:
                properties:
                  nav:
                    $ref: ../models/ShipNav.json
                required:
                  - nav
                type: object
            required:
              - data
            title: Dock Ship 200 Response
            type: object
      security:
        - AgentToken: []
      summary: Dock Ship
      tags:
        - fleet
  '/my/ships/{shipSymbol}/extract':
    parameters:
      - description: The ship symbol
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Extract resources from the waypoint into your ship. Send an optional
        survey as the payload to target specific yields.
      operationId: extract-resources
      parameters:
        - in: body
          name: body
          schema:
            properties:
              survey:
                $ref: ../models/Survey.json
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  cargo:
                    $ref: ../models/ShipCargo.json
                  cooldown:
                    $ref: ../models/Cooldown.json
                  extraction:
                    $ref: ../models/Extraction.json
                required:
                  - extraction
                  - cooldown
                  - cargo
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Extract Resources
      tags:
        - fleet
  '/my/ships/{shipSymbol}/jettison':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: Jettison cargo from your ship's cargo hold.
      operationId: jettison
      parameters:
        - in: body
          name: body
          schema:
            properties:
              symbol:
                type: string
              units:
                minimum: 1
                type: integer
            required:
              - symbol
              - units
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                properties:
                  cargo:
                    $ref: ../models/ShipCargo.json
                required:
                  - cargo
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Jettison Cargo
      tags:
        - fleet
  '/my/ships/{shipSymbol}/jump':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Jump your ship instantly to a target system. Unlike other forms of
        navigation, jumping requires a unit of antimatter.
      operationId: jump-ship
      parameters:
        - in: body
          name: body
          schema:
            properties:
              systemSymbol:
                description: The system symbol to jump to.
                type: string
            required:
              - systemSymbol
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                properties:
                  cooldown:
                    $ref: ../models/Cooldown.json
                  nav:
                    $ref: ../models/ShipNav.json
                required:
                  - route
                  - cooldown
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Jump Ship
      tags:
        - fleet
  '/my/ships/{shipSymbol}/nav':
    get:
      description: Get the current nav status of a ship.
      operationId: get-ship-nav
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: The current nav status of the ship.
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/ShipNav.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Ship Nav
      tags:
        - fleet
    parameters:
      - description: The ship symbol
        in: path
        name: shipSymbol
        required: true
        type: string
    patch:
      consumes:
        - application/json
      description: 'Update the nav data of a ship, such as the flight mode.'
      operationId: patch-ship-nav
      parameters:
        - in: body
          name: body
          schema:
            properties:
              flightMode:
                $ref: ../models/ShipNavFlightMode.json
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: The updated nav status of the ship.
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/ShipNav.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Patch Ship Nav
      tags:
        - fleet
  '/my/ships/{shipSymbol}/navigate':
    parameters:
      - description: The ship symbol
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Navigate to a target destination. The destination must be located within
        the same system as the ship. Navigating will consume the necessary fuel
        and supplies from the ship's manifest, and will pay out crew wages from
        the agent's account.


        The returned response will detail the route information including the
        expected time of arrival. Most ship actions are unavailable until the
        ship has arrived at it's destination.


        To travel between systems, see the ship's warp or jump actions.
      operationId: navigate-ship
      parameters:
        - description: ''
          in: body
          name: body
          schema:
            properties:
              waypointSymbol:
                description: The target destination.
                type: string
            required:
              - waypointSymbol
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: >-
            The successful transit information including the route details and
            changes to ship fuel, supplies, and crew wages paid. The route
            includes the expected time of arrival.
          schema:
            description: ''
            properties:
              data:
                properties:
                  fuel:
                    $ref: ../models/ShipFuel.json
                  nav:
                    $ref: ../models/ShipNav.json
                required:
                  - nav
                  - fuel
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Navigate Ship
      tags:
        - fleet
  '/my/ships/{shipSymbol}/orbit':
    parameters:
      - description: The symbol of the ship
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: >-
        Attempt to move your ship into orbit at it's current location. The
        request will only succeed if your ship is capable of moving into orbit
        at the time of the request.


        The endpoint is idempotent - successive calls will succeed even if the
        ship is already in orbit.
      operationId: orbit-ship
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: The ship has successfully moved into orbit at it's current location.
          schema:
            description: ''
            properties:
              data:
                properties:
                  nav:
                    $ref: ../models/ShipNav.json
                required:
                  - nav
                type: object
            required:
              - data
            title: Orbit Ship 200 Response
            type: object
      security:
        - AgentToken: []
      summary: Orbit Ship
      tags:
        - fleet
  '/my/ships/{shipSymbol}/purchase':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: Purchase cargo.
      operationId: purchase-cargo
      parameters:
        - in: body
          name: body
          schema:
            properties:
              symbol:
                type: string
              units:
                type: integer
            required:
              - symbol
              - units
            title: Purchase Cargo Request
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  cargo:
                    $ref: ../models/ShipCargo.json
                  transaction:
                    $ref: ../models/MarketTransaction.json
                required:
                  - cargo
                  - transaction
                  - agent
                type: object
            required:
              - data
            title: Purchase Cargo 201 Response
            type: object
      security:
        - AgentToken: []
      summary: Purchase Cargo
      tags:
        - fleet
  '/my/ships/{shipSymbol}/refine':
    parameters:
      - description: The symbol of the ship
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Attempt to refine the raw materials on your ship. The request will only
        succeed if your ship is capable of refining at the time of the request.
      operationId: ship-refine
      parameters:
        - in: body
          name: body
          schema:
            properties:
              produce:
                enum:
                  - IRON
                  - COPPER
                  - SILVER
                  - GOLD
                  - ALUMINUM
                  - PLATINUM
                  - URANITE
                  - MERITIUM
                  - FUEL
                type: string
            required:
              - produce
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: The ship has successfully started refining.
          schema:
            description: ''
            properties:
              data:
                properties:
                  cargo:
                    $ref: ../models/ShipCargo.json
                  consumed:
                    items:
                      properties:
                        tradeSymbol:
                          type: string
                        units:
                          type: integer
                      type: object
                    type: array
                  cooldown:
                    $ref: ../models/Cooldown.json
                  produced:
                    items:
                      properties:
                        tradeSymbol:
                          type: string
                        units:
                          type: integer
                      type: object
                    type: array
                required:
                  - cargo
                  - cooldown
                  - produced
                  - consumed
                type: object
            required:
              - data
            title: Ship Refine 200 Response
            type: object
      security:
        - AgentToken: []
      summary: Ship Refine
      tags:
        - fleet
  '/my/ships/{shipSymbol}/refuel':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: Refuel your ship from the local market.
      operationId: refuel-ship
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  fuel:
                    $ref: ../models/ShipFuel.json
                required:
                  - agent
                  - fuel
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Refuel Ship
      tags:
        - fleet
  '/my/ships/{shipSymbol}/scan/ships':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: Activate your ship's sensor arrays to scan for ship information.
      operationId: create-ship-ship-scan
      parameters: []
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  cooldown:
                    $ref: ../models/Cooldown.json
                  ships:
                    items:
                      $ref: ../models/ScannedShip.json
                    type: array
                required:
                  - cooldown
                  - ships
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Scan Ships
      tags:
        - fleet
  '/my/ships/{shipSymbol}/scan/systems':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: Activate your ship's sensor arrays to scan for system information.
      operationId: create-ship-system-scan
      parameters: []
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  cooldown:
                    $ref: ../models/Cooldown.json
                  systems:
                    items:
                      $ref: ../models/ScannedSystem.json
                    type: array
                required:
                  - cooldown
                  - systems
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Scan Systems
      tags:
        - fleet
  '/my/ships/{shipSymbol}/scan/waypoints':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: Activate your ship's sensor arrays to scan for waypoint information.
      operationId: create-ship-waypoint-scan
      parameters: []
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  cooldown:
                    $ref: ../models/Cooldown.json
                  waypoints:
                    items:
                      $ref: ../models/ScannedWaypoint.json
                    type: array
                required:
                  - cooldown
                  - waypoints
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Scan Waypoints
      tags:
        - fleet
  '/my/ships/{shipSymbol}/sell':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: Sell cargo.
      operationId: sell-cargo
      parameters:
        - in: body
          name: body
          schema:
            properties:
              symbol:
                type: string
              units:
                type: integer
            required:
              - symbol
              - units
            title: SellCargoRequest
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  cargo:
                    $ref: ../models/ShipCargo.json
                  transaction:
                    $ref: ../models/MarketTransaction.json
                required:
                  - cargo
                  - transaction
                  - agent
                type: object
            required:
              - data
            title: Sell Cargo 201 Response
            type: object
      security:
        - AgentToken: []
      summary: Sell Cargo
      tags:
        - fleet
  '/my/ships/{shipSymbol}/survey':
    parameters:
      - description: The symbol of the ship
        in: path
        name: shipSymbol
        required: true
        type: string
    post:
      description: >-
        If you want to target specific yields for an extraction, you can survey
        a waypoint, such as an asteroid field, and send the survey in the body
        of the extract request. Each survey may have multiple deposits, and if a
        symbol shows up more than once, that indicates a higher chance of
        extracting that resource.


        Your ship will enter a cooldown between consecutive survey requests.
        Surveys will eventually expire after a period of time. Multiple ships
        can use the same survey for extraction.
      operationId: create-survey
      parameters: []
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            properties:
              data:
                properties:
                  cooldown:
                    $ref: ../models/Cooldown.json
                  surveys:
                    items:
                      $ref: ../models/Survey.json
                    type: array
                required:
                  - surveys
                  - cooldown
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Create Survey
      tags:
        - fleet
  '/my/ships/{shipSymbol}/transfer':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: Transfer cargo between ships.
      operationId: transfer-cargo
      parameters:
        - in: body
          name: body
          schema:
            properties:
              shipSymbol:
                type: string
              tradeSymbol:
                type: string
              units:
                type: integer
            required:
              - tradeSymbol
              - units
              - shipSymbol
            title: Transfer Cargo Request
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Created
          schema:
            description: ''
            properties:
              data:
                properties:
                  cargo:
                    $ref: ../models/ShipCargo.json
                required:
                  - cargo
                type: object
            required:
              - data
            title: Transfer Cargo 200 Response
            type: object
      security:
        - AgentToken: []
      summary: Transfer Cargo
      tags:
        - fleet
  '/my/ships/{shipSymbol}/warp':
    parameters:
      - in: path
        name: shipSymbol
        required: true
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Warp your ship to a target destination in another system. Warping will
        consume the necessary fuel and supplies from the ship's manifest, and
        will pay out crew wages from the agent's account.


        The returned response will detail the route information including the
        expected time of arrival. Most ship actions are unavailable until the
        ship has arrived at it's destination.
      operationId: warp-ship
      parameters:
        - description: ''
          in: body
          name: body
          schema:
            properties:
              waypointSymbol:
                description: The target destination.
                type: string
            required:
              - waypointSymbol
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: >-
            The successful transit information including the route details and
            changes to ship fuel, supplies, and crew wages paid. The route
            includes the expected time of arrival.
          schema:
            description: ''
            properties:
              data:
                properties:
                  fuel:
                    $ref: ../models/ShipFuel.json
                  nav:
                    $ref: ../models/ShipNav.json
                required:
                  - nav
                  - fuel
                type: object
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Warp Ship
      tags:
        - fleet
  /register:
    post:
      consumes:
        - application/json
      description: >-
        Creates a new agent and ties it to a temporary Account.


        The agent symbol is a 3-14 character string that will represent your
        agent. This symbol will prefix the symbol of every ship you own. Agent
        symbols will be cast to all uppercase characters.


        A new agent will be granted an authorization token, a contract with
        their starting faction, a command ship with a jump drive, and one
        hundred thousand credits.


        > #### Keep your token safe and secure

        >

        > Save your token during the alpha phase. There is no way to regenerate
        this token without starting a new agent. In the future you will be able
        to generate and manage your tokens from the SpaceTraders website.


        You can accept your contract using the
        `/my/contracts/{contractId}/accept` endpoint. You will want to navigate
        your command ship to a nearby asteroid field and execute the
        `/my/ships/{shipSymbol}/extract` endpoint to mine various types of ores
        and minerals.


        Return to the contract destination and execute the
        `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the
        contract.


        When your contract is fulfilled, you can call
        `/my/contracts/{contractId}/fulfill` to retrieve payment.
      operationId: register
      parameters:
        - description: ''
          in: body
          name: body
          schema:
            properties:
              faction:
                description: The faction you choose determines your headquarters.
                enum:
                  - COSMIC
                  - VOID
                  - GALACTIC
                  - QUANTUM
                  - DOMINION
              symbol:
                description: How other agents will see your ships and information.
                example: BADGER
                maxLength: 14
                minLength: 3
                type: string
            required:
              - symbol
              - faction
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: OK
          schema:
            properties:
              data:
                properties:
                  agent:
                    $ref: ../models/Agent.json
                  contract:
                    $ref: ../models/Contract.json
                  faction:
                    $ref: ../models/Faction.json
                  ship:
                    $ref: ../models/Ship.json
                  token:
                    description: A Bearer token for accessing secured API endpoints.
                    type: string
                required:
                  - token
                  - agent
                  - faction
                  - contract
                  - ship
                type: object
            required:
              - data
            type: object
      summary: Register New Agent
      tags: []
  /systems:
    get:
      description: Return a list of all systems.
      operationId: get-systems
      parameters:
        - description: What entry offset to request
          in: query
          minimum: 1
          name: page
          type: integer
        - description: How many entries to return per page
          in: query
          maximum: 20
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                items:
                  $ref: ../models/System.json
                type: array
              meta:
                $ref: ../models/Meta.json
            required:
              - data
              - meta
            type: object
      security:
        - AgentToken: []
      summary: List Systems
      tags:
        - systems
  '/systems/{systemSymbol}':
    get:
      description: Get the details of a system.
      operationId: get-system
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/System.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get System
      tags:
        - systems
    parameters:
      - default: X1-OE
        description: The system symbol
        in: path
        name: systemSymbol
        required: true
        type: string
  '/systems/{systemSymbol}/waypoints':
    get:
      description: >-
        Fetch all of the waypoints for a given system. System must be charted or
        a ship must be present to return waypoint details.
      operationId: get-system-waypoints
      parameters:
        - description: What entry offset to request
          in: query
          minimum: 1
          name: page
          type: integer
        - description: How many entries to return per page
          in: query
          maximum: 20
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                items:
                  $ref: ../models/Waypoint.json
                type: array
              meta:
                $ref: ../models/Meta.json
            required:
              - data
              - meta
            type: object
      security:
        - AgentToken: []
      summary: List Waypoints
      tags:
        - systems
    parameters:
      - description: The system symbol
        in: path
        name: systemSymbol
        required: true
        type: string
  '/systems/{systemSymbol}/waypoints/{waypointSymbol}':
    get:
      description: View the details of a waypoint.
      operationId: get-waypoint
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/Waypoint.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Waypoint
      tags:
        - systems
    parameters:
      - description: The system symbol
        in: path
        name: systemSymbol
        required: true
        type: string
      - description: The waypoint symbol
        in: path
        name: waypointSymbol
        required: true
        type: string
  '/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate':
    get:
      description: Get jump gate details for a waypoint.
      operationId: get-jump-gate
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/JumpGate.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Jump Gate
      tags:
        - systems
    parameters:
      - description: The system symbol
        in: path
        name: systemSymbol
        required: true
        type: string
      - description: The waypoint symbol
        in: path
        name: waypointSymbol
        required: true
        type: string
  '/systems/{systemSymbol}/waypoints/{waypointSymbol}/market':
    get:
      description: >-
        Retrieve imports, exports and exchange data from a marketplace. Imports
        can be sold, exports can be purchased, and exchange goods can be
        purchased or sold. Send a ship to the waypoint to access trade good
        prices and recent transactions.
      operationId: get-market
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              data:
                $ref: ../models/Market.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Market
      tags:
        - systems
    parameters:
      - description: The system symbol
        in: path
        name: systemSymbol
        required: true
        type: string
      - description: The waypoint symbol
        in: path
        name: waypointSymbol
        required: true
        type: string
  '/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard':
    get:
      description: Get the shipyard for a waypoint.
      operationId: get-shipyard
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: ''
            properties:
              data:
                $ref: ../models/Shipyard.json
            required:
              - data
            type: object
      security:
        - AgentToken: []
      summary: Get Shipyard
      tags:
        - systems
    parameters:
      - description: The system symbol
        in: path
        name: systemSymbol
        required: true
        type: string
      - description: The waypoint symbol
        in: path
        name: waypointSymbol
        required: true
        type: string
schemes:
  - https
security:
  - AgentToken: []
securityDefinitions:
  AgentToken:
    description: >-
      When you register a new agent you will be granted a private bearer token
      which grants authorization to use the API.
    in: header
    name: Authorization
    type: apiKey
swagger: '2.0'
tags:
  - description: Factions
    name: factions
  - description: Fleet
    name: fleet
  - description: Contracts
    name: contracts
  - description: Systems
    name: systems
  - description: Agents
    name: agents
x-components:
  requestBodies: {}

